from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import logging

from app.models.model import SentimentModel
from app.config import settings

# 配置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 定义请求和响应模型
class TextRequest(BaseModel):
    text: str

class TextsRequest(BaseModel):
    texts: List[str]

class SentimentResponse(BaseModel):
    text: str
    sentiment: str
    confidence: float
    probabilities: dict

# 创建FastAPI应用
app = FastAPI(
    title="外卖评价情感分析API",
    description="使用BERT模型分析外卖评价的情感倾向",
    version="1.0.0"
)

# 加载模型
try:
    model = SentimentModel(settings.MODEL_PATH)
    logger.info("模型加载成功")
except Exception as e:
    logger.error(f"模型加载失败: {str(e)}")
    model = None

@app.get("/")
async def root():
    return {"message": "外卖评价情感分析API"}

@app.get("/health")
async def health_check():
    if model is None:
        raise HTTPException(status_code=503, detail="模型未就绪")
    return {"status": "healthy"}

@app.post("/predict", response_model=SentimentResponse)
async def predict_sentiment(request: TextRequest):
    if model is None:
        raise HTTPException(status_code=503, detail="模型未就绪")
    
    try:
        results = model.predict([request.text])
        return results[0]
    except Exception as e:
        logger.error(f"预测失败: {str(e)}")
        raise HTTPException(status_code=500, detail=f"预测失败: {str(e)}")

@app.post("/predict_batch", response_model=List[SentimentResponse])
async def predict_batch_sentiment(request: TextsRequest):
    if model is None:
        raise HTTPException(status_code=503, detail="模型未就绪")
    
    try:
        if len(request.texts) > 100:
            raise HTTPException(status_code=400, detail="一次最多处理100条文本")
        
        results = model.predict(request.texts)
        return results
    except Exception as e:
        logger.error(f"批量预测失败: {str(e)}")
        raise HTTPException(status_code=500, detail=f"批量预测失败: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
